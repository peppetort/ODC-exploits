import z3
from pwn import *

#flag{bet_u_d1dn't_r3ally_n33d_th4t_l1cen5e_right?}
 
n = 5
def repeated_entry(vector, solver):
    for i in range(5):
        for j in range(5):
            if i!=j :
                solver.add(vector[i] != vector[j])

def activation_check(entries, solver):

    matrix = [[0] * 5 for _ in range(5)]

    for i in range(5):
        for j in range(5):
            matrix[i][j] = entries[i][j]

    for i in range(n):
        vector = [matrix[i][j] for j in range(n)]
        repeated_entry(vector, solver)

    for j in range(n):
        vector = [matrix[i][j] for i in range(n)]
        repeated_entry(vector, solver)

    vector = [matrix[i][i] for i in range(n)]
    repeated_entry(vector, solver)

    vector = [matrix[i][n-1-i] for i in range(n)]
    repeated_entry(vector, solver)


#add sum costrain
def compute_sum(matrix, solver):
    sum__ = z3.Int('somma')
    for i in range(5):
        for j in range(5):
            sum__ += matrix[i][j]
    solver.add(sum__ % 96 == 75)

mat = [[z3.Int('c%d' % (int(str(j) + str(i))))  for i in range(5)] for j in range(5)]
solver = z3.Solver()

#printable chars costraint
for i in range(5):
    for j in range(5):
        solver.add(z3.And(mat[i][j] >= 49, mat[i][j] <= 53))

activation_check(mat, solver)
compute_sum(mat, solver)
solver.check()
m = solver.model()


res = ""
count = 0
for i in range(5):
    for j in range(5):
        c = m.eval(mat[i][j]).as_long()
        count = count + 1
        res = res + chr(c)
        if count == 5 and i != 4:
            res = res + '-'
            count = 0

print(res) 

r = remote('bin.ctf.offdef.it', 4006)
input('press a key...')
r.sendline(res)
flag = r.recvall()
print(flag)